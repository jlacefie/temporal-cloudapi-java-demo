/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import io.temporal.client.CloudOperationsClient;
import io.temporal.serviceclient.CloudServiceStubs;
import io.temporal.serviceclient.CloudServiceStubsOptions;

public class SimpleCloudApiDemo {

    private static final Logger logger = LoggerFactory.getLogger(SimpleCloudApiDemo.class);

    public static void main(String[] args) {

        String apiKey = System.getenv("TEMPORAL_CLIENT_CLOUD_API_KEY");
        String apiVersion = System.getenv("TEMPORAL_CLIENT_CLOUD_API_VERSION");
        String nsName = "testns4";
        String namespace = "testns4.ksfop";
        String nsNameMTLS = "testnsmtls4";
        String namespaceMTLS = "testnsmtls4.ksfop";
        String user = "testuserJL999@gmail.com";
        // String oId = "ff0b60a8e63c4f1abe1244f9f01c89d4"; // this is a UX defect being addressed
        String oId = "37dc003a3afb46b1b30812b5335fbbca"; // SA id
        String apiKeyName = "testapikey42";
        String uType = "service-account";
        String dName = "new api created key";
        String svcAcct = "TestSA";

        // This is a simple demo app that exercises the Temporal Cloud API. 
        // The intent of this demo app is to show how to use the Temporal Cloud API to create namespaces, users, and service accounts.
        // This is not a real application and should not be used in production.

        logger.info("starting SimpleCloudApiDemo");
        logger.info("creating a client connection using the experimental CloudOpsClient in the Java SDK");
        // create a client connection using the experimental CloudOpsClient in the Java SDK
        CloudOperationsClient client = CloudOperationsClient.newInstance(
            CloudServiceStubs.newServiceStubs(
                CloudServiceStubsOptions.newBuilder()
                    .addApiKey(() -> apiKey)
                    .setVersion(apiVersion)
                    .build()));

        // create a demo namespace client which encapsulates namespace demo methods
        logger.info("create a demo namespace client which encapsulates namespace demo methods");
        SimpleCloudApiNamespaceClient nsClient = new SimpleCloudApiNamespaceClient();
        // create a demo identity client which encapsulates identity demo methods;
        logger.info("create a demo identity client which encapsulates identiy demo methods");
        SimpleCloudApiIdentityClient idClient = new SimpleCloudApiIdentityClient();

        // Parse command-line arguments
        if (args.length == 0) {
            logger.error("No arguments provided. Please specify which examples to run.");
            return;
        }

        for (String arg : args) {
            switch (arg) {
                case "printNamespaces":
                    nsClient.printNamespaces(client);
                    break;
                case "createAPIKeyNamespace":
                    // namespace ceration is not idempotent, so we need to check if the namespace already exists
                    nsClient.createAPIKeyNamespace(client, nsName, namespace);
                    break;
                case "createMTLSNamespace":
                    // namespace ceration is not idempotent, so we need to check if the namespace already exists
                    nsClient.createMTLSNamespace(client, nsNameMTLS, namespaceMTLS);
                    break;
                case "rotateNamespaceMTLSCert":
                    nsClient.rotateNamespaceMTLSCert(client, nsNameMTLS, namespaceMTLS);
                    break;
                case "printUsers":
                    idClient.printUsers(client);
                    break;
                case "printServiceAccounts":
                    idClient.printServiceAccounts(client);
                    break;
                case "createUser":
                    // user creation is idempotent based on the email address
                    idClient.createUser(client, user, Map.of(namespace, "admin"), "developer");
                    break;
                case "createServiceAccount":
                    idClient.createServiceAccount(client, svcAcct, Map.of(namespace, "admin"), "developer");
                    break;
                case "createAPIKey":
                    idClient.createAPIKey(client, apiKeyName, oId, uType, dName);
                    break;
                default:
                    logger.error("Unknown argument: " + arg);
                    break;
            }
        }
    }
}
